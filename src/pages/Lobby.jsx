import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import {
  Box,
  Typography,
  TextField,
  Card,
  CardContent,
  Grid,
  Alert,
} from "@mui/material";
import HomeIcon from "@mui/icons-material/Home";
import GroupAddIcon from "@mui/icons-material/GroupAdd";
import useGameStore from "../stores/gameStore";
import useGameCreation from "../hooks/useGameCreation";
import useGameJoining from "../hooks/useGameJoining";
import GradientButton from "../components/GradientButton";
import NetworkStatus from "../components/NetworkStatus";

export default function Lobby() {
  const navigate = useNavigate();
  const { error: storeError, clearGame } = useGameStore();

  // –û—Ç–¥–µ–ª—å–Ω—ã–µ —Ö—É–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ
  const {
    createHost,
    isCreating,
    error: createError,
    canCreate,
  } = useGameCreation();

  const { join, isJoining, error: joinError, canJoin } = useGameJoining();

  const [nick, setNick] = useState("");
  const [code, setCode] = useState("");

  // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–≥—Ä—É –ø—Ä–∏ –∑–∞—Ö–æ–¥–µ –≤ –ª–æ–±–±–∏
  useEffect(() => {
    clearGame();
  }, [clearGame]);

  const handleCreateHost = async () => {
    const cleanup = createHost();

    // –ï—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
    // –≠—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —Ö—É–∫–µ —á–µ—Ä–µ–∑ createGame
    if (cleanup && typeof cleanup === "function") {
      // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ö—É–∫–µ
      return cleanup;
    }
  };

  const handleJoin = () => {
    const cleanup = join(code, nick);

    // –ï—Å–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
    // –≠—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —Ö—É–∫–µ —á–µ—Ä–µ–∑ joinGame
    if (cleanup && typeof cleanup === "function") {
      // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ö—É–∫–µ
      return cleanup;
    }
  };

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã
  const { game, role } = useGameStore();
  useEffect(() => {
    if (game && role === "host") {
      navigate(`/host/${game.id}`, { replace: true });
    } else if (game && role === "player") {
      // playerId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ store
      const { playerId } = useGameStore.getState();
      navigate(`/play/${game.id}/${playerId}`, { replace: true });
    }
  }, [game, role, navigate]);

  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏
  const displayError = createError || joinError || storeError;

  return (
    <Box textAlign="center" mt={4}>
      <Typography variant="h1">üè† BUNKER</Typography>

      {displayError && (
        <Alert severity="error" sx={{ maxWidth: 400, mx: "auto", mb: 2 }}>
          {displayError}
        </Alert>
      )}

      <Grid container spacing={4} justifyContent="center">
        <Grid item xs={12} sm={6} md={4}>
          <Card>
            <CardContent>
              <Typography variant="h4" gutterBottom>
                Host bunker
              </Typography>
              <GradientButton
                fullWidth
                startIcon={<HomeIcon />}
                onClick={handleCreateHost}
                disabled={!canCreate || isCreating}
                loading={isCreating}
              >
                {isCreating
                  ? "CREATING..."
                  : !canCreate
                  ? "CONNECTING..."
                  : "CREATE"}
              </GradientButton>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} sm={6} md={4}>
          <Card>
            <CardContent>
              <Typography variant="h4" gutterBottom>
                Join survivors
              </Typography>
              <TextField
                label="Your name"
                fullWidth
                sx={{ my: 1 }}
                value={nick}
                onChange={(e) => setNick(e.target.value)}
                disabled={!canJoin || isJoining}
              />
              <TextField
                label="Bunker ID"
                fullWidth
                sx={{ mb: 2 }}
                value={code}
                onChange={(e) => setCode(e.target.value.toUpperCase())}
                onKeyPress={(e) =>
                  e.key === "Enter" && canJoin && !isJoining && handleJoin()
                }
                disabled={!canJoin || isJoining}
              />
              <GradientButton
                color="secondary"
                fullWidth
                startIcon={<GroupAddIcon />}
                onClick={handleJoin}
                disabled={!canJoin || isJoining || !nick.trim() || !code.trim()}
                loading={isJoining}
              >
                {isJoining ? "JOINING..." : !canJoin ? "CONNECTING..." : "JOIN"}
              </GradientButton>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      <NetworkStatus />
    </Box>
  );
}
